{"version":3,"sources":["resources/reddit_icon_svg.svg","Layout/Navbar.tsx","Layout/common.tsx","Layout/Pagination.tsx","PostDetail/PostDetail.tsx","Store/PostList/types.ts","PostList/PostList.tsx","PostList/PostListItem.tsx","PostList/PostListContainer.tsx","Store/PostList/actions.ts","App.tsx","reportWebVitals.ts","Store/PostList/reducer.ts","API/Client.ts","Store/PostList/sagas.ts","Store/store.ts","index.tsx"],"names":["StyledPageHeader","styled","div","StyledRedditLogo","img","StyledH1WithLeftMargin","h1","Navbar","src","RedditLogo","StyledAuthorSpan","span","StyledComments","StyledAuthorHeader","header","StyledCenteredDiv","Spinner","loading","color","height","width","radius","margin","StyledButton","button","StyledContainer","Pagination","StyledImageContainer","StyledTitleContainer","FLEX_WITH_MARGIN_STYLE","display","justifyContent","marginTop","marginBottom","PostDetail","style","fromNow","FETCH_POST_LIST","FETCH_POST_LIST_SUCCESS","FETCH_POST_LIST_ERROR","StyledPageListContainer","postWasRead","css","label","StyledSpinner","PostList","postList","getPostList","useTransition","item","id","from","opacity","transform","enter","leave","React","useEffect","connect","state","posts","content","data","dispatch","type","payload","StyledPostsContainer","deviceAppliesForSplitLayout","StyledDetailsContainer","animated","buildDetailsContainer","transitions","map","props","key","App","window","innerWidth","useState","toggle","config","delay","Fragment","PostListContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","before","after","modhash","axios","require","default","fetchPostList","get","response","catch","error","watchFetchPostList","fetchPostListSaga","takeEvery","call","result","put","fetchListWatchers","fork","reducers","combineReducers","action","children","post","composeEnhancers","composeWithDevTools","trace","traceLimit","rootSaga","root","watchers","all","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7fad63bd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/reddit_icon_svg.01b2014d.svg\";","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport RedditLogo from '../resources/reddit_icon_svg.svg';\r\n\r\nconst StyledPageHeader = styled.div`\r\n    background-color: #282c34;\r\n    color: white;\r\n    width: 100%;\r\n    padding-top: 10px;\r\n    padding-bottom: 10px;\r\n    display: flex;\r\n    justify-content: center;\r\n    position: sticky;\r\n    top: 0;\r\n    z-index: 99999;\r\n`;\r\n\r\nconst StyledRedditLogo = styled.img`\r\n    width: 50px;\r\n`;\r\n\r\nconst StyledH1WithLeftMargin = styled.h1`\r\n    margin-left: 10px;\r\n`;\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <StyledPageHeader>\r\n            <StyledRedditLogo src={RedditLogo}></StyledRedditLogo>\r\n            <StyledH1WithLeftMargin>Reddiget</StyledH1WithLeftMargin>            \r\n        </StyledPageHeader>\r\n    )\r\n};\r\n\r\nexport default Navbar;","import styled from 'styled-components';\r\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\r\n\r\nexport const FLEX_CENTER_STYLE = {\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n};\r\n\r\nexport const StyledAuthorSpan = styled.span`\r\n    text-decoration: underline;\r\n`;\r\n\r\nexport const StyledComments = styled.div`\r\n    margin-top:15px;\r\n    color: lightgray;\r\n    :hover {\r\n        color: white;\r\n    }\r\n`;\r\n\r\nexport const StyledAuthorHeader = styled.header`\r\n    font-size: 14px;\r\n    color: lightgray;\r\n`;\r\n\r\nexport const StyledCenteredDiv = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const Spinner = ({ loading }) => {\r\n    return <ScaleLoader color={'red'} loading={loading} height={50} width={10} radius={2} margin={2} />\r\n};","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { StyledCenteredDiv } from './common';\r\n\r\n\r\nconst StyledButton = styled.button`\r\n    color: white;\r\n    background-color: orangered;\r\n    border: none;\r\n    padding: 10px 15px;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 14px;\r\n    margin-left: 10px;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    transition-duration: 0.4s;\r\n    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);\r\n\r\n    :hover {\r\n        color: orangered;\r\n        background-color: white;        \r\n    }\r\n\r\n    @media only screen and (max-width: 450px) {\r\n        font-size: 12px;\r\n    }\r\n`;\r\n\r\nconst StyledContainer = styled(StyledCenteredDiv)`\r\n    position: sticky;\r\n    top: 5%;\r\n    z-index: 99999;\r\n    background-color: #282c34;\r\n    padding-top: 10px;\r\n    padding-bottom: 10px;\r\n    \r\n    @media only screen and (max-height: 1400px) {\r\n        top: 6%;\r\n    }\r\n\r\n    @media only screen and (max-height: 1200px) {\r\n        top: 8%;\r\n    }\r\n\r\n    @media only screen and (max-height: 950px) {\r\n        top: 8.5%;\r\n    }\r\n\r\n    @media only screen and (max-height: 850px) {\r\n        top: 9.5%;\r\n    }\r\n\r\n    @media only screen and (max-height: 768px) {\r\n        top: 10%;\r\n    }\r\n\r\n    @media only screen and (max-height: 750px) {\r\n        top: 10.5%;\r\n    }\r\n\r\n    @media only screen and (max-height: 700px) {\r\n        top: 12%;\r\n    }\r\n`;\r\n\r\nconst Pagination = () => {\r\n    return (\r\n        <StyledContainer>\r\n            <StyledButton>&laquo; Previous</StyledButton>\r\n            <StyledButton>Dismiss all &#10005;</StyledButton>\r\n            <StyledButton>Next &raquo;</StyledButton>\r\n        </StyledContainer>\r\n    )\r\n};\r\n\r\nexport default Pagination;","import React from 'react';\r\nimport Moment from 'react-moment';\r\nimport styled from 'styled-components';\r\nimport { FLEX_CENTER_STYLE, StyledAuthorHeader, StyledAuthorSpan, StyledCenteredDiv, StyledComments } from '../Layout/common';\r\n\r\nconst StyledContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    box-shadow: 0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\r\n    border: 2px solid orangered;\r\n    border-radius: 15px;\r\n    color: white;\r\n    flex-grow: 1;\r\n    position: sticky;\r\n    top: 20%;\r\n\r\n    @media only screen and (max-height: 950px) {\r\n        top: 25%;\r\n    }\r\n\r\n    @media only screen and (max-height: 800px) {\r\n        top: 28%;\r\n    }\r\n\r\n    @media only screen and (max-height: 768px) {\r\n        top: 25%;\r\n    }\r\n\r\n    @media only screen and (max-height: 700px) {\r\n        top: 34%;\r\n    }\r\n\r\n    @media only screen and (max-height: 500px) {\r\n        align-items: center;\r\n    }\r\n`;\r\n\r\nconst StyledImageContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-self:center;\r\n\r\n    @media only screen and (max-width: 700px) {\r\n        max-width: 250px;\r\n        max-height: 300px;\r\n    }\r\n\r\n    @media only screen and (max-width: 600px) {\r\n        max-height: 250px;\r\n    }\r\n\r\n    @media only screen and (max-width: 500px) {\r\n        max-height: 225px;\r\n    }\r\n\r\n    @media only screen and (max-width: 400px) {\r\n        max-height: 200px;\r\n    }\r\n`;\r\n\r\nconst StyledTitleContainer = styled(StyledCenteredDiv)`\r\n    text-align: center;\r\n`;\r\n\r\nconst FLEX_WITH_MARGIN_STYLE = {\r\n    ...FLEX_CENTER_STYLE,\r\n    marginTop: '10px',\r\n    marginBottom: '10px'\r\n}\r\n\r\nconst PostDetail = () => {\r\n    return (\r\n        <StyledContainer>\r\n            <StyledTitleContainer>\r\n                <h3>My son always texts to, and wanted to share.</h3>\r\n            </StyledTitleContainer>\r\n            <StyledImageContainer>\r\n                <img src=\"https://i.redd.it/ll5vz9bigwf61.gif\" />\r\n            </StyledImageContainer>\r\n            <StyledAuthorHeader style={FLEX_WITH_MARGIN_STYLE}>\r\n                <span>{`Sent by `}<StyledAuthorSpan>Jose</StyledAuthorSpan>&nbsp;<Moment fromNow>{1231313111}</Moment></span>\r\n            </StyledAuthorHeader>\r\n            <StyledComments style={FLEX_WITH_MARGIN_STYLE}>\r\n                <span>12350 comments</span>\r\n            </StyledComments>\r\n        </StyledContainer>\r\n    );\r\n}\r\n\r\nexport default PostDetail;","import { Action } from 'redux';\r\nimport { Page, Post } from '../../types';\r\n\r\nexport const FETCH_POST_LIST = \"FETCH_POST_LIST\";\r\nexport const FETCH_POST_LIST_SUCCESS = \"FETCH_POST_LIST_SUCCESS\";\r\nexport const FETCH_POST_LIST_ERROR = \"FETCH_POST_LIST_ERROR\";\r\n\r\nexport const IMAGE_IS_NSFW = 'nsfw';\r\nexport const IMAGE_DEF = 'default';\r\nexport const IMAGE_SELF = 'self';\r\n\r\nexport const IMAGES_TO_BE_REPLACED_WITH_PLACEHOLDER = [IMAGE_IS_NSFW, IMAGE_DEF, IMAGE_SELF];\r\n\r\nexport interface PostListState {\r\n    loading: boolean;\r\n    content: Page<Post>;\r\n};\r\n\r\nexport interface FetchPostListAction extends Action {\r\n    type: typeof FETCH_POST_LIST;\r\n    payload: null;\r\n};\r\n\r\nexport interface FetchPostListSuccessAction extends Action {\r\n    type: typeof FETCH_POST_LIST_SUCCESS;\r\n    payload: PostListState\r\n};\r\n\r\nexport interface FetchPostListErrorAction extends Action {\r\n    type: typeof FETCH_POST_LIST_ERROR;\r\n    payload: null;\r\n};\r\n\r\nexport type PostListAction =  FetchPostListAction | FetchPostListSuccessAction | FetchPostListErrorAction;;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PostListItem from './PostListItem';\r\nimport { useSpring, animated, useTransition } from 'react-spring';\r\nimport { Post } from '../types';\r\nimport { Spinner } from '../Layout/common';\r\n\r\nconst StyledPageListContainer = styled.div`\r\n    background-color: #282c34;\r\n`;\r\n\r\ninterface PostListProperties {\r\n    postList: Array<Post>;\r\n    loading: boolean;\r\n    getPostList: () => any;\r\n};\r\n\r\n\r\nconst StyledSpinner = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    padding: 100px;\r\n`;\r\n\r\nconst PostList = ({ postList, loading, getPostList }: PostListProperties) => {\r\n\r\n    const listTransitions = useTransition(postList, item => item.id, {\r\n        from: { opacity: 0, display: 'hidden', transform: \"translate3d(-25%, 0px, 0px)\" },\r\n        enter: { opacity: 1, transform: \"translate3d(0%, 0px, 0px)\" },\r\n        leave: { opacity: 0, height: 'auto', transform: \"translate3d(-25%, 0px, 0px)\" }\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        getPostList();\r\n    }, []);\r\n\r\n    return (\r\n        <StyledPageListContainer>\r\n            {   true &&\r\n                <StyledSpinner>\r\n                    <Spinner loading={true}></Spinner>\r\n                </StyledSpinner>\r\n            }\r\n            {!loading && false && listTransitions.map(({ item, props, key }) => {\r\n                return (\r\n                    item && <animated.div key={key} style={props}>\r\n                        <PostListItem\r\n                            key={key}\r\n                            author={item.author}\r\n                            created_utc={item.created_utc}\r\n                            num_comments={item.num_comments}\r\n                            id={item.id}\r\n                            title={item.title}\r\n                            thumbnail={item.thumbnail}\r\n                            url={item.url}\r\n                        />\r\n                    </animated.div>\r\n                )\r\n            })}\r\n        </StyledPageListContainer>\r\n    );\r\n\r\n}\r\n\r\nexport default PostList;","import React, { SyntheticEvent } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport Moment from 'react-moment';\r\nimport { StyledAuthorHeader, StyledAuthorSpan, StyledComments } from '../Layout/common';\r\nimport { Post } from '../types';\r\nimport DefaultImage from '../resources/placeholder.jpg';\r\nimport { IMAGES_TO_BE_REPLACED_WITH_PLACEHOLDER, IMAGE_IS_NSFW } from '../Store/PostList/types';\r\n\r\ninterface PostListItemProperties extends Partial<Post> {\r\n    \r\n}\r\n\r\nconst StyledDiv = styled.div`\r\n    color: white;\r\n    border: 2px solid orangered;\r\n    border-radius: 15px;\r\n    margin-top: 5px;\r\n    padding: 10px;\r\n    transition: transform .2s ease-in;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    \r\n    ${({ postWasRead }) => postWasRead && css`\r\n        border-color: #ff450042;\r\n    `}\r\n\r\n    :hover {\r\n        cursor: pointer;\r\n        transform: scale(1.025);\r\n        box-shadow: 0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\r\n    }\r\n\r\n    @media only screen and (max-width: 500px) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nconst StyledDismissPostSpan = styled.span`\r\n    color: white;\r\n    font-size: 14px;\r\n    padding: 10px;\r\n    :hover {\r\n        color: orangered\r\n    }\r\n`;\r\n\r\nconst StyledCardHeader = styled.div`\r\n    text-align: right;\r\n    order: 4;\r\n\r\n    @media only screen and (max-width: 500px) {\r\n        order: 1;\r\n    }\r\n`;\r\n\r\nconst StyledImageContainer = styled.div`\r\n    max-height: 140px;\r\n    max-width: 200px;\r\n    display: flex;\r\n    flex-basis: 40%;\r\n\r\n    @media only screen and (max-width: 500px) {\r\n        flex-basis: 100%;\r\n    }\r\n`;\r\n\r\nconst StyledPostContent = styled.div`\r\n    display: flex;\r\n    flex-grow: 1;    \r\n\r\n\r\n    @media only screen and (max-width: 500px) {\r\n        flex-wrap: wrap;\r\n        order: 2;\r\n        justify-content: center;\r\n    }\r\n`;\r\n\r\nconst StyledPostInfo = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding-left: 15px;\r\n\r\n    @media only screen and (max-width: 500px) {\r\n        margin-top: 15px;\r\n        align-items: center;\r\n    }\r\n`;\r\n\r\nconst StyledTitleLabel = styled.label`\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    font-size: 17px;\r\n    letter-spacing: 0.5px;\r\n    ${({ postWasRead }) => postWasRead && css`\r\n        color: lightgray;\r\n    `}\r\n`;\r\n\r\nconst PostListItem = (\r\n    {\r\n        id,\r\n        title,\r\n        author,\r\n        created_utc,\r\n        url,\r\n        thumbnail,\r\n        num_comments,\r\n        is_video\r\n    }: PostListItemProperties) => {\r\n\r\n    const [postWasRead, setPostWasRead] = React.useState(false);\r\n\r\n    const onDismiss = (e: SyntheticEvent, id?: string) => {\r\n        if(!id) return;\r\n\r\n       // onRemove(id);\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const onClickThumbOpenOnNewTab = (e: SyntheticEvent, url?: string): void => {\r\n        if (!url) return;\r\n\r\n        window.open(url, '_blank');\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const getThumbnail = (thumb: string | undefined) => {\r\n        if(!thumb) return DefaultImage;\r\n\r\n        if(IMAGES_TO_BE_REPLACED_WITH_PLACEHOLDER.includes(thumb)) return DefaultImage;\r\n\r\n        return thumb;\r\n    };\r\n\r\n    return (\r\n        <StyledDiv postWasRead={postWasRead} onClick={() => setPostWasRead(true)}>\r\n            <StyledCardHeader>\r\n                <StyledDismissPostSpan onClick={(e) => onDismiss(e, id)}>&#10005;</StyledDismissPostSpan>\r\n            </StyledCardHeader>\r\n            <StyledPostContent>\r\n                <StyledImageContainer onClick={(e) => onClickThumbOpenOnNewTab(e, url)}>\r\n                    <img src={getThumbnail(thumbnail)} width=\"100%\" height=\"100%\" />\r\n                </StyledImageContainer>\r\n                <StyledPostInfo>\r\n                    <StyledTitleLabel postWasRead={postWasRead}>{title}</StyledTitleLabel>\r\n                    <StyledAuthorHeader>\r\n                        <span>{`Sent by `}<StyledAuthorSpan>{author}</StyledAuthorSpan>&nbsp;<Moment fromNow>{created_utc}</Moment></span>\r\n                    </StyledAuthorHeader>\r\n                    <StyledComments>\r\n                        <span>{`${num_comments} comments`}</span>\r\n                    </StyledComments>\r\n                </StyledPostInfo>\r\n            </StyledPostContent>\r\n        </StyledDiv>\r\n    );\r\n}\r\n\r\nexport default PostListItem;","import { ApplicationState } from \"../Store/store\";\r\n\r\nimport { connect } from 'react-redux';\r\nimport { fetchPostList } from \"../Store/PostList/actions\";\r\nimport PostList from \"./PostList\";\r\n\r\nconst mapStatetoProps = (state: ApplicationState) => ({\r\n    postList: state.posts.content.data,\r\n    loading: state.posts.loading\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getPostList: () => dispatch(fetchPostList())\r\n});\r\n\r\nexport default connect(mapStatetoProps, mapDispatchToProps)(PostList);","import { FetchPostListAction, FetchPostListErrorAction, FetchPostListSuccessAction, FETCH_POST_LIST, FETCH_POST_LIST_ERROR, FETCH_POST_LIST_SUCCESS } from \"./types\";\r\n\r\nexport const fetchPostList = (): FetchPostListAction => {\r\n    return {\r\n        type: FETCH_POST_LIST,\r\n        payload: null\r\n    };\r\n};\r\n\r\nexport const fetchPostListSuccess = (data: any): FetchPostListSuccessAction => {\r\n    return {\r\n        type: FETCH_POST_LIST_SUCCESS,\r\n        payload: data\r\n    };\r\n};\r\n\r\nexport const fetchPostListError = (): FetchPostListErrorAction => {\r\n    return {\r\n        type: FETCH_POST_LIST_ERROR,\r\n        payload: null\r\n    };\r\n};","import React from 'react';\r\nimport { animated, useTransition, UseTransitionResult } from 'react-spring';\r\nimport styled, { css } from 'styled-components';\r\nimport './App.css';\r\nimport Navbar from './Layout/Navbar';\r\nimport Pagination from './Layout/Pagination';\r\nimport PostDetail from './PostDetail/PostDetail';\r\nimport PostList from './PostList/PostList';\r\nimport PostListContainer from './PostList/PostListContainer';\r\n\r\nconst StyledContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  background-color: #282c34;\r\n  width: 100%;\r\n  justify-content: space-around;\r\n`;\r\n\r\nconst StyledPostsContainer = styled.div`\r\n  flex-basis: 40%;\r\n  ${({ deviceAppliesForSplitLayout }) => !deviceAppliesForSplitLayout && css`\r\n    flex-basis: 90%;\r\n  `}\r\n`;\r\n\r\nconst StyledDetailsContainer = styled(animated.div)`\r\n  display: flex;\r\n  margin-top: 20px;\r\n  align-items: flex-start;\r\n  flex-basis: 50%;\r\n`;\r\n\r\n\r\nconst buildDetailsContainer = (transitions: Array<UseTransitionResult<boolean, Pick<React.CSSProperties, any>>>) => {\r\n  return transitions.map(({ item, key, props }) => {\r\n    return item && <StyledDetailsContainer style={props}><PostDetail /></StyledDetailsContainer>\r\n  });\r\n};\r\n\r\nconst App = () => {\r\n\r\n  const deviceAppliesForSplitLayout = window.innerWidth >= 1100;\r\n\r\n  const [toggle, setToggle] = React.useState(true);\r\n\r\n  const transitions = useTransition(toggle, null, {\r\n    config: { delay: 2000 },\r\n    from: { opacity: 0, width: '0px', transform: \"translate3d(20px, 0px, 0px)\" },\r\n    enter: { opacity: 1, width: 'auto', transform: \"translate3d(0px, 0px, 0px)\" },\r\n  });\r\n\r\n  return (\r\n      <React.Fragment>\r\n        <Navbar></Navbar>\r\n        <StyledContainer>\r\n          <StyledPostsContainer deviceAppliesForSplitLayout={deviceAppliesForSplitLayout}>\r\n            <Pagination></Pagination>\r\n            <PostListContainer />\r\n          </StyledPostsContainer>\r\n          {deviceAppliesForSplitLayout && buildDetailsContainer(transitions)}\r\n        </StyledContainer>\r\n      </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { FETCH_POST_LIST_ERROR, FETCH_POST_LIST_SUCCESS, PostListAction, PostListState } from \"./types\";\r\n\r\nconst initialState: PostListState = {\r\n    loading: true,\r\n    content: {\r\n        data: [],\r\n        before: '',\r\n        after: '',\r\n        modhash: ''\r\n    }\r\n};\r\n\r\nexport default (state: PostListState = initialState, action) => {\r\n    const response = action.payload;\r\n    switch (action.type) {\r\n        case FETCH_POST_LIST_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                content: {\r\n                    data: response?.children.map((post) => post.data),\r\n                    before: response?.before,\r\n                    after: response?.after,\r\n                    modhash: response?.modhash\r\n                }\r\n            }\r\n        case FETCH_POST_LIST_ERROR:\r\n            return {\r\n                ...state,\r\n                loading: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};","const axios = require('axios').default;\r\n\r\nconst REDDIT_FETCH_API = 'https://www.reddit.com/top/.json?limit=50'\r\n\r\nexport const fetchPostList = () => {\r\n    return axios.get(REDDIT_FETCH_API)\r\n        .then((response: any) => {\r\n            return response?.data?.data;\r\n        }).catch((error: any) => {\r\n            return null;\r\n        });\r\n};","import { call, fork, ForkEffect, put, takeEvery } from 'redux-saga/effects';\r\nimport { fetchPostList } from '../../API/Client';\r\nimport { fetchPostListError, fetchPostListSuccess } from './actions';\r\nimport { FETCH_POST_LIST } from './types';\r\n\r\nfunction* watchFetchPostList() {\r\n    yield takeEvery(FETCH_POST_LIST, fetchPostListSaga);\r\n};\r\n\r\nfunction* fetchPostListSaga() {\r\n    try {\r\n        const result = yield call(fetchPostList);\r\n        yield put(fetchPostListSuccess(result));\r\n    } catch (error) {\r\n        yield put(fetchPostListError())\r\n    }\r\n};\r\n\r\nexport const fetchListWatchers: Array<ForkEffect> = [\r\n    fork(watchFetchPostList)\r\n];","import { combineReducers, createStore, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { Post } from \"../types\";\r\nimport { PostListState } from './PostList/types';\r\nimport postListReducer from './PostList/reducer';\r\nimport { fetchListWatchers } from './PostList/sagas';\r\nimport { all } from 'redux-saga/effects';\r\n\r\n\r\nexport interface ApplicationState {\r\n    posts: PostListState;\r\n    selectedPost: Post;\r\n};\r\n\r\nexport const reducers = combineReducers({\r\n    posts: postListReducer\r\n});\r\n\r\nconst composeEnhancers = composeWithDevTools({\r\n    trace: true,\r\n    traceLimit: 25\r\n});\r\n\r\nexport const rootSaga = function* root() {\r\n    const watchers = [...fetchListWatchers];\r\n    yield all(watchers);\r\n};\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport const store = createStore(reducers, composeEnhancers(applyMiddleware(sagaMiddleware)));\r\n\r\nsagaMiddleware.run(rootSaga);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './Store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}